import JSON5 from 'json5'
import {fileExistsAsync, writeFileAsync, mkdirAsync} from './sav/util/file.js'
import {resolve, basename, dirname} from 'path'
import {isString, convertCase, hyphenCase, prop} from 'sav-util'

const noticeString = '// @NOTICE This file is generated by sav-cli.\n\n'
const eslintQuotes = '/* eslint quotes: ["off"] */\n'

let appTemplate = `<template>
  <div id="app">
    <router-view class="view"></router-view>
  </div>
</template>
<script>
  export default {
    name: 'App',
    getters: [
    ],
    acctions: [
    ]
  }
</script>
`
export async function createAppVue (dest) {
  let appVue = resolve(dest, 'App.vue')
  if (!await fileExistsAsync(appVue)) {
    console.log('createAppVue:', appVue)
    await writeFileAsync(appVue, appTemplate)
  }
}

let vueTemplate = `<template>
  <div className>
    <router-view></router-view>
  </div>
</template>
<script>
  export default {
    name: 'componentName',
    getters: [
    ],
    acctions: [
    ]
  }
</script>
`
export async function saveVueRoutes (groups, dest) {
  let {content, files} = createVueRoutes(groups, JSON5)
  await mkdirAsync(dest)
  
  let routes = resolve(dest, 'routes.js')
  console.log('createVueRoutes:', routes)
  await writeFileAsync(routes, `${noticeString}${eslintQuotes}${content}\n`)

  await Promise.all(files.map(async (file) => {
    file = resolve(dest, file)
    if (!await fileExistsAsync(file)) {
      let baseName = basename(file, '.vue')
      let dirName = basename(dirname(file))
      let template = vueTemplate
      if (baseName !== dirName) {
        template = vueTemplate.replace('<router-view></router-view>', baseName)
      }
      let className = hyphenCase(baseName)
      template = template.replace('className', `class="${className}"`)
        .replace('componentName', baseName)
      console.log('createVueFile:', file)
      await mkdirAsync(dirname(file))
      await writeFileAsync(file, template)
    }
  }))
}

export async function applyVue (groups, program) {
  await mkdirAsync(program.views)
  return Promise.all([
    createAppVue(program.views),
    saveVueRoutes(groups, program.views)
  ])
}

/*
  [
    "component": "Account/Account",
    "path": "/account",
    "children": [
      {
        "component": "Account/AccountLogin",
        "name": "AccountLogin",
        "path": "login"
      }
    ]
  ]
 */

const caseType = 'camel'
const prefix = '/'
const vueCase = 'pascal'

function makeVueRouteUri (ref, nameUris) {
  let module = ref.props
  let moduleName = ref.name
  let relative = convertPath(module.path, caseType, moduleName)
  let routePrefix = module.prefix || ''
  if (routePrefix.length) {
    routePrefix = normalPath(routePrefix + '/')
  }
  let vueModuleRoute = {
    component: convertCase(vueCase, `${moduleName}/${moduleName}`),
    path: normalPath(prefix + routePrefix + relative),
    children: []
  }
  for (let routeName in module.routes) {
    let route = module.routes[routeName]
    if (route.vue !== false) {
      let path = convertPath(route.path, caseType, routeName)
      let vueRoute = {
        component: route.component || convertCase(vueCase, `${moduleName}/${moduleName}_${routeName}`),
        name: convertCase(vueCase, `${moduleName}_${routeName}`),
        path
      }
      nameUris[vueRoute.name] = `${ref.uri}.${routeName}`
      vueModuleRoute.children.push(vueRoute)
    }
  }
  return vueModuleRoute
}

function unique (arr) {
  return arr.filter((it, index) => arr.indexOf(it) === index)
}

// 生成Vue的路由文件
export function createVueRoutes (groups, JSON5, es6 = true) {
  let comps = []
  let nameUris = {}
  let uris = groups.uris
  for (let uri in uris) {
    let ref = uris[uri]
    if (ref.isModal && uri.indexOf('page.') === 0) {
      let VueRoute = makeVueRouteUri(ref, nameUris)
      if (VueRoute) {
        comps.push(VueRoute)
      }
    }
  }
  let routes = JSON5 ? JSON5.stringify(comps, null, 2) : JSON.stringify(comps, null, 2)
  let components = []
  // let names = []
  let files = []
  routes = routes.replace(JSON5 ? /component:\s+"((\w+)\/(\w+))"/g
    : /"component":\s+"((\w+)\/(\w+))"/g, (_, path, dir, name) => {
    let file = `./${path}.vue`
    files.push(file)
    if (es6) {
      components.push(`import ${name} from '${file}'`)
      // names.push(name)
    } else {
      name = `require('${file}')`
    }
    let ret = `component: ${name}`
    return ret
  })
  if (es6) {
    // 去重
    files = unique(files)
    components = unique(components)
    // names = unique(names)
  }
  let arr = []
  if (es6) {
    arr = arr.concat(components).concat([''])
    // .concat(names.map((it) => `${it}.name = '${it}'`)).concat([''])
    .concat(`export default ${routes}`)
  } else {
    arr.push(`module.exports = ${routes}`)
  }
  let content = arr.join('\n')
  return {
    content,
    nameUris,
    // components,
    // names,
    files
  }
}

function convertPath (path, caseType, name) {
  if (!isString(path)) {
    path = convertCase(caseType, name)
  }
  return path
}

function normalPath (path) {
  return path.replace(/\/\//g, '/')
}
