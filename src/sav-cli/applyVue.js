import {createVueRoutes} from '../sav/middlewares'
import JSON5 from 'json5'
import {fileExistsAsync, writeFileAsync, mkdirAsync} from './sav/util/file.js'
import {resolve, basename, dirname} from 'path'
import {hyphenCase} from '../sav/util/convert.js'

const noticeString = '// @NOTICE This file is generated by sav-cli.\n\n'
const eslintQuotes = '/* eslint quotes: ["off"] */\n'

let appTemplate = `<template>
  <div id="app">
    <router-view class="view"></router-view>
  </div>
</template>
<script>
  export default {
  }
</script>
`
export async function createAppVue (dest) {
  let appVue = resolve(dest, 'App.vue')
  if (!await fileExistsAsync(appVue)) {
    console.log('createAppVue:', appVue)
    await writeFileAsync(appVue, appTemplate)
  }
}

let vueTemplate = `<template>
  <div className>
    <router-view></router-view>
  </div>
</template>
<script>
  export default {
  }
</script>
`
export async function saveVueRoutes (groups, dest) {
  let {content, files} = createVueRoutes(groups, true, JSON5)
  await mkdirAsync(dest)
  let routes = resolve(dest, 'routes.js')
  console.log('createVueRoutes:', routes)
  await writeFileAsync(routes, `${noticeString}${eslintQuotes}${content}\n`)
  await Promise.all(files.map(async (file) => {
    file = resolve(dest, file)
    if (!await fileExistsAsync(file)) {
      let baseName = basename(file, '.vue')
      let dirName = basename(dirname(file))
      let template = vueTemplate
      if (baseName !== dirName) {
        template = vueTemplate.replace('<router-view></router-view>', baseName)
      }
      let className = hyphenCase(baseName)
      template = template.replace('className', `class="${className}"`)
      console.log('createVueFile:', file)
      await mkdirAsync(dirname(file))
      await writeFileAsync(file, template)
    }
  }))
}

export async function applyVue (groups, program) {
  await mkdirAsync(program.view)
  return Promise.all([
    createAppVue(program.view),
    saveVueRoutes(groups, program.view)
  ])
}
