import {writeFileAsync, mkdirAsync} from '../sav/util/file.js'
import {camelCase} from '../sav/util/convert.js'
import {resolve} from 'path'
import JSON5 from 'json5'

const noticeString = '// @NOTICE This file is generated by sav-cli.\n\n'
const eslintQuotes = '/* eslint quotes: ["off"] */\n'

export async function createApiFile (groups, dest) {
  await mkdirAsync(dest)

  let allRoutes = {}
  for (let moduleGroup in groups) {
    let group = groups[moduleGroup]
    for (let moduleName in group) {
      let module = group[moduleName]
      // 提取schema
      if (module.SavRoute) {
        // 生成路由
        let routes = [].concat(module.SavRoute.parents).concat(module.SavRoute.childs)
        if (routes.length) {
          let isPage = moduleGroup.toUpperCase() === 'PAGE'
          let isApi = moduleGroup.toUpperCase() === 'API'
          routes.reduce((dist, it) => {
            let props = module.uris[it.uri].props
            let routeProps = props.route && props.route.props
            let name = camelCase(it.method.toLowerCase() + '_' +
              (isApi ? 'api_' : '') +
              it.uri.replace(isPage ? 'Page.' : 'Api.', '_'))
            let api = Object.assign({}, routeProps, {
              path: it.path
            })
            delete api.methods
            if (props.title && props.title.props) {
              api.title = props.title.props
            }
            allRoutes[name] = api
            dist.push(api)
            return dist
          }, [])
        }
      }
    }
  }
  let json = JSON5.stringify(allRoutes, null, 2)
  let apiData = `${noticeString}${eslintQuotes}export default ${json}\n`
  let apiFile = resolve(dest, 'apis.js')
  console.log('createApiFile:', apiFile)
  await writeFileAsync(apiFile, apiData)
}

export async function createClientUri (groups, dest) {
  await mkdirAsync(dest)

  let allRoutes = {}
  for (let moduleGroup in groups) {
    let group = groups[moduleGroup]
    for (let moduleName in group) {
      let module = group[moduleName]
      // 提取schema
      if (module.SavRoute) {
        // 生成路由
        let routes = [].concat(module.SavRoute.parents).concat(module.SavRoute.childs)
        if (routes.length) {
          let isPage = moduleGroup.toUpperCase() === 'PAGE'
          let isApi = moduleGroup.toUpperCase() === 'API'
          routes.reduce((dist, it) => {
            let props = module.uris[it.uri].props
            let routeProps = props.route && props.route.props
            let name = camelCase(it.method.toLowerCase() + '_' +
              (isApi ? 'api_' : '') +
              it.uri.replace(isPage ? 'Page.' : 'Api.', '_'))
            let api = Object.assign({}, routeProps, {
              path: it.path
            })
            delete api.methods
            if (props.title && props.title.props) {
              api.title = props.title.props
            }
            allRoutes[name] = api
            dist.push(api)
            return dist
          }, [])
        }
      }
    }
  }
  let json = JSON5.stringify(allRoutes, null, 2)
  let apiData = `${noticeString}${eslintQuotes}export default ${json}\n`
  let apiFile = resolve(dest, 'apis.js')
  console.log('createClientUri:', apiFile)
  await writeFileAsync(apiFile, apiData)
}

export function applySchemaApi (groups, program) {
  return createClientUri(groups, program.view)
}
